-- RuckingStart Database Schema
-- Run this in your Supabase SQL Editor

-- Create plans table
CREATE TABLE IF NOT EXISTS plans (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    plan_id VARCHAR(50) UNIQUE NOT NULL,
    user_email VARCHAR(255) NOT NULL,
    user_name VARCHAR(255) NOT NULL,
    user_responses JSONB NOT NULL,
    plan_data JSONB NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
    accessed_count INTEGER DEFAULT 0,
    last_accessed TIMESTAMP WITH TIME ZONE
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_plans_plan_id ON plans(plan_id);
CREATE INDEX IF NOT EXISTS idx_plans_user_email ON plans(user_email);
CREATE INDEX IF NOT EXISTS idx_plans_created_at ON plans(created_at);

-- Create email queue table for tracking email sends
CREATE TABLE IF NOT EXISTS email_queue (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    to_email VARCHAR(255) NOT NULL,
    to_name VARCHAR(255) NOT NULL,
    plan_url VARCHAR(500) NOT NULL,
    email_subject VARCHAR(500) NOT NULL,
    email_body TEXT NOT NULL,
    status VARCHAR(50) DEFAULT 'pending',
    sent_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
    error_message TEXT
);

-- Create index for email queue
CREATE INDEX IF NOT EXISTS idx_email_queue_status ON email_queue(status);
CREATE INDEX IF NOT EXISTS idx_email_queue_created_at ON email_queue(created_at);

-- Enable Row Level Security (RLS) for security
ALTER TABLE plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE email_queue ENABLE ROW LEVEL SECURITY;

-- Create policies to allow public access (since it's a public app)
-- Note: In production, you might want more restrictive policies
CREATE POLICY "Allow public read access to plans" ON plans FOR SELECT USING (true);
CREATE POLICY "Allow public insert access to plans" ON plans FOR INSERT WITH CHECK (true);
CREATE POLICY "Allow public update access to plans" ON plans FOR UPDATE USING (true);

-- Email queue policies (more restrictive)
CREATE POLICY "Allow public insert to email queue" ON email_queue FOR INSERT WITH CHECK (true);

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc', NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at
CREATE TRIGGER update_plans_updated_at 
    BEFORE UPDATE ON plans 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Insert some sample data for testing (optional)
-- You can remove this section if you don't want sample data
/*
INSERT INTO plans (plan_id, user_email, user_name, user_responses, plan_data) VALUES 
('test123', 'test@ruckingstart.com', 'Test User', 
 '{"frequency": "3x", "terrain": "mixed", "experience": "beginner"}',
 '{"weeks": [{"week": 1, "distance": "1-2 miles", "weight": "20 lbs"}]}');
*/

-- Create view for analytics (optional)
CREATE OR REPLACE VIEW plan_analytics AS
SELECT 
    DATE_TRUNC('day', created_at) as date,
    COUNT(*) as plans_created,
    COUNT(DISTINCT user_email) as unique_users,
    AVG(accessed_count) as avg_access_count
FROM plans
GROUP BY DATE_TRUNC('day', created_at)
ORDER BY date DESC;

-- Grant access to the view
GRANT SELECT ON plan_analytics TO anon, authenticated;

COMMENT ON TABLE plans IS 'Stores user-generated rucking training plans';
COMMENT ON TABLE email_queue IS 'Queue for email notifications and plan deliveries';
COMMENT ON VIEW plan_analytics IS 'Daily analytics for plan creation and usage';